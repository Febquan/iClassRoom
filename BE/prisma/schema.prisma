// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  url= env("DATABASE_URL")
}



model User {
  id       String   @id @default(uuid())
  userName String   
  email    String   @unique
  avatar    String   
  password String
  isVerify Boolean  @default(false)
  isOauth Boolean @default(false)
  createdAt DateTime @default(now())
  createClass Class[]
  joinClass UserClass[]
  recievePost PrivateTestPostReceiver[] @relation(name:"receiverPrivate") 
  writePost Post[] @relation(name:"author") 
  writeComment Comment[] @relation(name:"commentAuthor") 
  writePrivateComment PrivateCommentTest[] @relation(name:"commentAuthorPrivate") 
  doTest DoTest[]
  notis Noti[] @relation(name:"ClassNotiUser") 
}
model Noti {
  id String @id @default(uuid())
  content String
  isUnRead Boolean @default(true)
  userId String
  classId String
  target  String
  type NotiType
  class Class @relation(name:"ClassNotiClass",fields: [classId], references: [id], onDelete: Cascade)
  user User @relation(name:"ClassNotiUser",fields: [userId], references: [id], onDelete: Cascade)
}

enum NotiType {
  post
  gradeReview
  finalizeGrade
  gradeReviewChat
}

model Class {
  id       String   @id @default(uuid())
  className String   
  createBy String  
  createdAt DateTime @default(now())
  joinCodeStudent String? 
  joinCodeTeacher String?
  studentExtraInfo Json?
  creator  User  @relation(fields: [createBy],references:[id],onDelete: Cascade)
  haveStudent UserClass[]
  post Post[] @relation(name:"classPost") 
  privatePost PrivateTestPostContent[] @relation(name:"classPrivatePost") 
  gradePart GradePart[]
  notis Noti[] @relation(name:"ClassNotiClass") 
}
model UserClass {
  userId String
  courseId  String
  organizeId String? 
  student   User  @relation(fields: [userId], references: [id])
  class    Class   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  role  Role @default(student)
  @@id([userId, courseId])
}



enum Role {
  teacher
  student
}

model GradePart {
  id        String     @id @default(uuid())
  name String
  scale Float
  classID  String 
  sort Int?
  class    Class   @relation(fields: [classID], references: [id] ,onDelete: Cascade)
  testid Test[]
}

model DoTest{
  testId  String 
  studentId String 
  point Float?
  fileKeys  String[] 
  pendingGradeReview Boolean @default(false)
  student    User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  test Test   @relation(fields: [testId], references: [id], onDelete: Cascade)
  @@id([studentId, testId])
}

model Test {
  id        String     @id @default(uuid())
  name String
  scale Float
  gradePartId  String 
  sort Int?
  isFinalize Boolean @default(false)
  isOnline Boolean @default(false)
  deadLine DateTime?
  gradePart    GradePart   @relation(fields: [gradePartId], references: [id] , onDelete: Cascade)
  doTest DoTest[]
  content PrivateTestPostContent? @relation(name: "testContent")
}



model Post {
  id         String        @id @default(uuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title      String
  content  String
  published  Boolean    @default(false)
  fileKeys  String[] 
  authorId   String
  classId  String 
  author     User       @relation(name: "author",fields: [authorId], references: [id])
  class     Class       @relation( name: "classPost",fields: [classId], references: [id],onDelete: Cascade)
  comments Comment[] @relation(name:"commentPost") 
}


model Comment {
  id         String        @id @default(uuid())
  createdAt  DateTime   @default(now())
  authorId   String
  content  String
  postId  String
  author     User       @relation(name: "commentAuthor",fields: [authorId], references: [id])
  postComment    Post       @relation(name: "commentPost",fields: [postId], references: [id],onDelete: Cascade)
}



model PrivateTestPostContent {
  id         String        @id @default(uuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title      String
  content  String
  fileKeys  String[] 
  classId  String 
  testId String @unique
  test   Test        @relation(name: "testContent", fields: [testId], references: [id] ,onDelete: Cascade)
  class     Class       @relation(name: "classPrivatePost", fields: [classId], references: [id],onDelete: Cascade)
  receiver PrivateTestPostReceiver[] @relation(name:"PostPrivateContent") 
}
model PrivateTestPostReceiver {
  id         String        @id @default(uuid())
  receiverId String
  contentId String 
  receiver     User     @relation(name: "receiverPrivate",fields: [receiverId], references: [id],onDelete: Cascade)
  comments PrivateCommentTest[] @relation(name:"commentPrivatePost") 
  content PrivateTestPostContent   @relation(name: "PostPrivateContent",fields: [contentId], references: [id],onDelete: Cascade)
}


model PrivateCommentTest {
  id         String        @id @default(uuid())
  createdAt  DateTime   @default(now())
  authorId   String
  content  String
  postId  String
  author     User       @relation(name: "commentAuthorPrivate",fields: [authorId], references: [id],onDelete: Cascade)
  postComment    PrivateTestPostReceiver       @relation(name: "commentPrivatePost",fields: [postId], references: [id],onDelete: Cascade)
}